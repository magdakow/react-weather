{"version":3,"sources":["components/SearchCity.js","components/ViewWeather.js","App.js","serviceWorker.js","index.js"],"names":["SearchCity","state","cityName","handleChange","event","target","value","name","setState","handleSubmit","preventDefault","passData","data","console","log","props","getCityWeather","this","onSubmit","className","type","onChange","React","Component","ViewWeather","time","cityLatitude","cityLongitude","currentTemp","dayMinTemp","dayMaxTemp","currentHumidity","currentPressure","currentWind","currentRainfall","isIncorrectCity","isLoading","isWeatherData","getCityWeatherData","receivedCity","axios","post","then","res","processMain","main","processCoord","coord","processWind","wind","processRain","weather","processTime","catch","reason","temp","temp_min","temp_max","humidity","pressure","lat","lon","speed","description","timeInMilisec","dt","date","Date","year","getFullYear","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","substr","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d51a84f3.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass SearchCity extends React.Component {\r\n\r\n    state = {\r\n        cityName: '',\r\n    };\r\n\r\n    handleChange = (event) => {\r\n        const {value, name} = event.target;\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.passData(this.state.cityName);\r\n    };\r\n\r\n    passData = (data) => {\r\n        console.log('PassData ' + data)\r\n        this.props.getCityWeather(data);\r\n    };\r\n\r\n    render() {\r\n        const {cityName} = this.state;\r\n        return (\r\n            <section>\r\n                <div>\r\n                    <form onSubmit={this.handleSubmit}>\r\n                        <h2>Enter City Name:</h2> <br/>\r\n                        <input className=\"city-input\" type='text' name='cityName' value={cityName}\r\n                               onChange={this.handleChange}/>\r\n                        <button>Check weather</button>\r\n                    </form>\r\n                </div>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchCity;","import React from \"react\";\r\nimport SearchCity from \"./SearchCity\";\r\nimport axios from 'axios';\r\n\r\nclass ViewWeather extends React.Component {\r\n\r\n    state = {\r\n        cityName: '',\r\n        time: '',\r\n        cityLatitude: '',\r\n        cityLongitude: '',\r\n        currentTemp: '',\r\n        dayMinTemp: '',\r\n        dayMaxTemp: '',\r\n        currentHumidity: '',\r\n        currentPressure: '',\r\n        currentWind: '',\r\n        currentRainfall: '',\r\n        isIncorrectCity: false,\r\n        isLoading: false,\r\n        isWeatherData: false\r\n    };\r\n\r\n    getCityWeatherData = (receivedCity) => {\r\n        this.setState({\r\n            isLoading: true\r\n        });\r\n        axios.post(`https://api.openweathermap.org/data/2.5/weather?q=` + receivedCity + `&appid=05508bb378ad891b493b0c886cca7a57&units=metric`)\r\n            .then(res => res.data).then(data => {\r\n            console.log(data);\r\n            this.processMain(data.main);\r\n            this.processCoord(data.coord);\r\n            this.processWind(data.wind);\r\n            this.processRain(data.weather[0]);\r\n            this.processTime(data);\r\n\r\n            this.setState({\r\n                cityName: receivedCity,\r\n                isIncorrectCity: false,\r\n                isLoading: false,\r\n                isWeatherData: true\r\n            });\r\n        }).catch(reason => {\r\n            this.setState({\r\n                isIncorrectCity: true,\r\n                isLoading: false,\r\n                isWeatherData: true\r\n            });\r\n            console.log(reason);\r\n        });\r\n    };\r\n\r\n    processMain = (data) => {\r\n        if (data !== null && typeof data !== 'undefined') {\r\n            this.setState({\r\n                currentTemp: data.temp,\r\n                dayMinTemp: data.temp_min,\r\n                dayMaxTemp: data.temp_max,\r\n                currentHumidity: data.humidity + '%',\r\n                currentPressure: data.pressure + 'hPa',\r\n            });\r\n            console.log('Set main');\r\n        }\r\n    };\r\n\r\n    processCoord = (data) => {\r\n        if (data !== null && typeof data !== 'undefined') {\r\n            this.setState({\r\n                cityLatitude: data.lat,\r\n                cityLongitude: data.lon,\r\n            });\r\n            console.log('Set coordinates');\r\n        }\r\n    };\r\n\r\n    processWind = (data) => {\r\n        if (data !== null && typeof data !== 'undefined') {\r\n            this.setState({\r\n                currentWind: data.speed + 'm/s',\r\n            });\r\n            console.log('Set wind');\r\n        }\r\n    };\r\n\r\n    processRain = (data) => {\r\n        if (data !== null && typeof data !== 'undefined') {\r\n            this.setState({\r\n                currentRainfall: data.description,\r\n            });\r\n            console.log('Set rain');\r\n        }\r\n    };\r\n\r\n    processTime = (data) => {\r\n        if (data !== null && typeof data !== 'undefined') {\r\n            let timeInMilisec = data.dt;\r\n            let date = new Date(timeInMilisec * 1000);\r\n            let months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n            let year = date.getFullYear();\r\n            let month = months[date.getMonth()];\r\n            let day = date.getDate();\r\n            let hours = date.getHours();\r\n            let minutes = \"0\" + date.getMinutes();\r\n            let seconds = \"0\" + date.getSeconds();\r\n            let formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\r\n            let time = day + ' ' + month + ' ' + year + ' ' + formattedTime;\r\n            this.setState({\r\n                time: time,\r\n            });\r\n            console.log('Set time');\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {isLoading, isIncorrectCity} = this.state;\r\n        if (isIncorrectCity && !isLoading) {\r\n            return (\r\n                <section>\r\n                    <div className='container'>\r\n                        <SearchCity getCityWeather={this.getCityWeatherData}/>\r\n                        <div className='alert-danger text-center'>Entered City is incorrect!</div>\r\n                    </div>\r\n                </section>\r\n            )\r\n        } else if (isLoading) {\r\n            return (\r\n                <section>\r\n                    <div className='container'>\r\n                        <div className='alert-info text-center'>Loading</div>\r\n                    </div>\r\n                </section>\r\n            )\r\n        } else {\r\n            return (\r\n                <section>\r\n                    <div className='container'>\r\n                        <SearchCity getCityWeather={this.getCityWeatherData}/>\r\n                        <div className='text'>\r\n                            <div className={[this.state.isWeatherData ? 'visible' : 'invisible']}>\r\n                                <div className='text-center-city'>Weather for city: {this.state.cityName}</div>\r\n                                <br/>\r\n                                <div className='text-center-date'>Data downloaded at: {this.state.time}</div>\r\n                                <br/>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-sm text-center\">\r\n                                        City latitude: {this.state.cityLatitude}\r\n                                    </div>\r\n                                    <div className=\"col-sm text-center\">\r\n                                        City longitude: {this.state.cityLongitude}\r\n                                    </div>\r\n                                    <div className=\"col-sm text-center\">\r\n                                        City currentRainfall: {this.state.currentRainfall}\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-sm text-center\">\r\n                                        City current temp: {this.state.currentTemp} &deg;C\r\n                                    </div>\r\n                                    <div className=\"col-sm text-center\">\r\n                                        City day min temp: {this.state.dayMinTemp} &deg;C\r\n                                    </div>\r\n                                    <div className=\"col-sm text-center\">\r\n                                        City day max temp: {this.state.dayMaxTemp} &deg;C\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-sm text-center\">\r\n                                        City currentHumidity: {this.state.currentHumidity}\r\n                                    </div>\r\n                                    <div className=\"col-sm text-center\">\r\n                                        City currentPressure: {this.state.currentPressure}\r\n                                    </div>\r\n                                    <div className=\"col-sm text-center\">\r\n                                        City currentWind: {this.state.currentWind}\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </section>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default ViewWeather;","import React from 'react';\r\nimport './App.css';\r\nimport ViewWeather from \"./components/ViewWeather\";\r\n\r\nfunction App() {\r\n    return (\r\n        <ViewWeather/>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'}\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}